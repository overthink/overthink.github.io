{"version":3,"sources":["webpack:///webpack/bootstrap 4a7d54f9f8a8907d7e99","webpack:///./src/fpmclone.ts"],"names":[],"mappings":"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","file":"./dist/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 4a7d54f9f8a8907d7e99\n **/","// Disclaimer: I'm not a game developer and I'm just learning TypeScript, so\n// treat this code with extra suspicion.\nnamespace FMPDemo {\n\n    /** Something sent over the \"wire\".  Just a marker for now. */\n    interface Message {\n        seqNum: number;\n    }\n\n    /** Input from a client. Gets sent to the server. */\n    class Input implements Message {\n        seqNum: number;\n        pressTime: number;\n        entityId: number;\n        constructor(seqNum: number, pressTime: number, entityId: number) {\n            this.seqNum = seqNum;\n            this.pressTime = pressTime;\n            this.entityId = entityId;\n        }\n    }\n\n    /**\n     * I don't know the gamedev meaning of this, but here's how I'm viewing it\n     * here:  Each client and the server have their own entity objects for\n     * everything that is rendered on screen.  The server sends WorldState\n     * messages to everyone containing state for all the entities.\n     */\n    class Entity {\n        id: number;\n        color: string;\n        x: number = 0;\n        speed: number = 2;\n\n        constructor(id: number, color: string) {\n            this.id = id;\n            this.color = color;\n        }\n\n        applyInput(input: Input): void {\n            this.x += input.pressTime * this.speed;\n        }\n\n        /** Return a copy of this entity. */\n        copy(): Entity {\n            const e = new Entity(this.id, this.color);\n            e.x = this.x;\n            e.speed = this.speed;\n            return e;\n        }\n    }\n\n    class WorldState implements Message {\n        seqNum: number;\n        entities: Array<Entity>;\n\n        /** Last input the server has processed from the client to which the\n         * WorldState message is sent. */\n        lastProcessedInputSeqNums: Array<number>;\n\n        constructor(seqNum: number, entities: Array<Entity>, lastProcessedInputSeqNums: Array<number>) {\n            this.seqNum = seqNum;\n            this.entities = entities;\n            this.lastProcessedInputSeqNums = lastProcessedInputSeqNums;\n        }\n    }\n\n    class SavedWorldState {\n        /**\n         * The time at which the client processed this WorldState message.\n         */\n        processedTs: number;\n        value: WorldState;\n        constructor(processedTs: number, value: WorldState) {\n            this.processedTs = processedTs;\n            this.value = value;\n        }\n    }\n\n    /** Represents a message that has been received by a LagNetwork. */\n    class QueuedMessage {\n        recvTs: number;\n        payload: Message;\n    }\n\n    class LagNetwork {\n        messages: Array<QueuedMessage> = [];\n\n        /** Returns next message \"received\" from the network, if any. */\n        receive(): QueuedMessage | undefined {\n            let now = Date.now();\n            for (let i = 0; i < this.messages.length; ++i) {\n                var qm = this.messages[i];\n                if (qm.recvTs <= now) {\n                    this.messages.splice(i, 1);\n                    return qm;\n                }\n            }\n        }\n\n        send(lagMs: number, message: Message): void {\n            var m = new QueuedMessage;\n            m.recvTs = Date.now() + lagMs;\n            m.payload = message;\n            this.messages.push(m);\n        }\n    }\n\n    class Client {\n        cssId: string; // id of the div containing this client (kind of a hack)\n        color: string;\n        canvas: HTMLCanvasElement;\n        nonAckdInputsElement: Element;\n        server?: Server;\n        tickRate: number = 60;\n        // Why is there `entityId` and also `entity.id`?  Good question.\n        // `entityId` is assigned by the server when the connection is made.\n        // It is later used to retreive state data for this client from\n        // WorldState messages.\n        entityId?: number;  // TODO: extremely inconvenient allowing this to have undefined value\n        entity?: Entity; // The player's entity in the world; server provides it.\n        entities: Array<Entity> = []; // awful, contains reference to this.entity as well\n        leftKeyDown: boolean = false;\n        rightKeyDown: boolean = false;\n        network: LagNetwork = new LagNetwork;\n        lagMs: number = 250;\n        lastUpdateTs: number = -1;\n        inputSeqNum: number = 0;\n        pendingInputs: Array<Input> = [];\n        curWorldState?: SavedWorldState;  // the last state we received from the server\n        prevWorldState?: SavedWorldState; // penultimate state from server, used for entity interpolation\n        usePrediction: boolean = false;\n        useReconciliation: boolean = false;\n        useEntityInterpolation: boolean = false;\n        private updateTimer?: number;\n\n        constructor(cssId: string, color: string, canvas: HTMLCanvasElement, nonAckdInputsElement: Element) {\n            this.cssId = cssId;\n            this.color = color;\n            this.canvas = canvas;\n            this.nonAckdInputsElement = nonAckdInputsElement;\n        }\n\n        processServerMessages(): void {\n            while (true) {\n                const msg = this.network.receive();\n                if (!msg) break;\n                const incoming = Util.cast(msg.payload, WorldState);\n\n                for (let i = 0; i < incoming.entities.length; ++i) {\n                    const entity = incoming.entities[i];\n\n                    if (this.entityId === undefined) break; // pointless, but tsc unhappy without this\n\n                    if (entity.id === this.entityId) {\n                        // entity is the remote state for our local this.entity object\n\n                        // create an entity for ourself if we haven't yet\n                        if (!this.entity) {\n                            if (typeof this.entityId === 'undefined') {\n                                throw new Error(`connected client should always have entityId ${this}`);\n                            }\n                            this.entity = new Entity(this.entityId, this.color);\n                        }\n\n                        // Set our position to whatever was sent by server\n                        this.entity.x = entity.x;\n\n                        this.entities[entity.id] = this.entity; // despair\n\n                        if (this.useReconciliation) {\n                            // i.e. reapply all inputs not yet ackd by server\n\n                            const lastProcessed = incoming.lastProcessedInputSeqNums[this.entityId];\n                            if (lastProcessed) {\n                                // First, keep inputs that have not yet been taken\n                                // into account by the last WorldState sent by the\n                                // server.\n                                this.pendingInputs = this.pendingInputs.filter(input => {\n                                    return input.seqNum > lastProcessed;\n                                });\n                            }\n\n                            // apply any remaining inputs to our local world state\n                            this.pendingInputs.forEach(input => {\n                                if (this.entity) {\n                                    this.entity.applyInput(input);\n                                }\n                            });\n                        }\n\n                    } else {\n                        // non-local-player entity\n                        this.entities[entity.id] = entity;\n                    }\n                }\n                // update prev and current states for later entity interpolation\n                this.prevWorldState = this.curWorldState;\n                this.curWorldState = new SavedWorldState(Date.now(), incoming);\n            }\n        }\n\n        processInputs(): void {\n            if (this.server === undefined) return;\n            if (this.entity === undefined) return;\n            if (this.entityId === undefined) return;\n\n            const nowTs: number = Date.now();\n            const lastUpdateTs: number = this.lastUpdateTs >= 0 ? this.lastUpdateTs : nowTs;\n            const delta: number = (nowTs - lastUpdateTs) / 1000;\n            this.lastUpdateTs = nowTs;\n\n            // package up the player's current input\n            let input: Input;\n            if (this.rightKeyDown) {\n                input = new Input(this.inputSeqNum++, delta, this.entityId);\n            } else if (this.leftKeyDown) {\n                input = new Input(this.inputSeqNum++, -delta, this.entityId);\n            } else {\n                // nothing interesting happenend\n                return;\n            }\n\n            this.server.network.send(this.lagMs, input);\n\n            if (this.usePrediction) {\n                // optimistically apply our input (assume server will accept it)\n                this.entity.applyInput(input);\n            }\n\n            if (this.useReconciliation) {\n                // Save input for later reconciliation. We'll need to re-apply\n                // some of our optimistically applied inputs after we next\n                // hear from the server.\n                this.pendingInputs.push(input);\n            }\n        }\n\n        // log only for a specific client (debug)\n        // private log(id: number, ...args: any[]): void {\n        //     if (this.cssId === 'p' + id.toString()) {\n        //         console.log(`${Date.now()} - client p${id}:`, ...args);\n        //     }\n        // }\n\n        private interpolateEntities(): void {\n            if (this.prevWorldState === undefined) return;\n            if (this.curWorldState === undefined) return;\n\n            // Recall: \"each player sees itself in the present but sees the\n            // other entities in the past\"\n            // (http://www.gabrielgambetta.com/fpm3.html) so figure out how\n            // far beyond the most recent server state we are right now, then\n            // interpolate everyone else that amount of time between prev and\n            // cur server states (i.e. one update behind).\n            const now = Date.now();\n            const delta = now - this.curWorldState.processedTs;\n            const statesDelta = this.curWorldState.processedTs - this.prevWorldState.processedTs;\n            let interpFactor = delta / statesDelta;\n            if (interpFactor === Infinity) interpFactor = 1; // If it'll let us div 0, why not\n\n            const prev = Util.cast(this.prevWorldState.value, WorldState);\n            const cur = Util.cast(this.curWorldState.value, WorldState);\n\n            for (let i = 0; i < cur.entities.length; ++i) {\n                const curEntity = cur.entities[i];\n                if (curEntity.id === this.entityId) continue; // don't interpolate self\n                const prevEntity = prev.entities[i]; // assumes the set of entities never changes\n                const newEntity = curEntity.copy();\n                newEntity.x = prevEntity.x + (interpFactor * (curEntity.x - prevEntity.x));\n                newEntity.speed = prevEntity.speed + (interpFactor * (curEntity.speed - prevEntity.speed));\n                this.entities[i] = newEntity;\n            }\n        }\n\n        render(): void {\n            Util.render(this.canvas, this.entities, this.entities.length);\n        }\n\n        update(): void {\n            this.processServerMessages();\n            if (!this.entity) return; // not connected yet\n            if (this.useEntityInterpolation) {\n                this.interpolateEntities();\n            }\n            this.processInputs();\n            this.render();\n            this.nonAckdInputsElement.textContent = this.pendingInputs.length.toString();\n        }\n\n        start(): void {\n            this.updateTimer = setInterval(() => this.update(), 1000 / this.tickRate);\n        }\n\n    }\n\n    class Server {\n        canvas: HTMLCanvasElement;\n        clients: Array<Client> = [];           // nth client also has entityId == n\n        entities: Array<Entity> = [];          // nth entry has entityId n\n        lastProcessedInputSeqNums: Array<number>= []; // last processed input's seq num, by entityId\n        network: LagNetwork = new LagNetwork;  // server's network (where it receives inputs from clients)\n        private tickRate: number = 5;\n        private updateTimer?: number;\n        private worldStateSeq: number = 0;\n\n        constructor(canvas: HTMLCanvasElement) {\n            this.canvas = canvas;\n        }\n\n        connect(client: Client): void {\n            client.server = this;\n            const entityId = this.clients.length;\n            client.entityId = entityId; // give the client its entity id so it can identify future state messages\n            this.clients.push(client);\n\n            const entity = new Entity(entityId, client.color);\n            entity.x = 5; // spawn point\n            this.entities.push(entity);\n        }\n\n        /** Look for cheaters here. */\n        private static validInput(input: Input): boolean {\n            // Not exactly sure where 1/40 comes from.  I got it from the\n            // original code.  The longest possible valid \"press\" should be\n            // 1/client.tickRate (1/60).  But the JS timers are not reliable,\n            // so if you use 1/60 below you end up throwing out a lot of\n            // inputs that are slighly too long... so maybe that's where 1/40\n            // comes from?\n            return Math.abs(input.pressTime) <= 1 / 40;\n        }\n\n        /**\n         * Process all pending messages from clients.\n         */\n        processInputs(): void {\n            while (true) {\n                const msg = this.network.receive();\n                if (!msg) break;\n                const input = Util.cast(msg.payload, Input);\n                if (!input) break;\n                if (Server.validInput(input)) {\n                    const id = input.entityId;\n                    this.entities[id].applyInput(input);\n                    this.lastProcessedInputSeqNums[id] = input.seqNum;\n                } else {\n                    console.log('throwing out input!', input);\n                }\n            }\n        }\n\n        /** Send world state to every client. */\n        sendWorldState(): void {\n            // Make sure to send copies of our state, and not just references.\n            // i.e. simulate serializing the data like we'd do if we were\n            // using a real network.\n            const msg = new WorldState(\n                this.worldStateSeq++,\n                this.entities.map(e => e.copy()),\n                this.lastProcessedInputSeqNums.slice()\n            );\n            this.clients.forEach(client => {\n                client.network.send(client.lagMs, msg);\n            });\n        }\n\n        render(): void {\n            Util.render(this.canvas, this.entities, this.entities.length);\n        }\n\n        update(): void {\n            this.processInputs();\n            this.sendWorldState();\n            this.render();\n        }\n\n        setTickRate(x: number): void {\n            this.tickRate = x;\n            if (this.updateTimer !== undefined) {\n                clearInterval(this.updateTimer);\n            }\n            this.startUpdateTimer();\n        }\n\n        private startUpdateTimer(): void {\n            this.updateTimer = setInterval(() => this.update(), 1000 / this.tickRate);\n        }\n        \n        start(): void {\n            this.setTickRate(this.tickRate);\n        }\n\n    }\n\n    class Util {\n        /**\n         * Cast 'instance' to the type of 'ctor'.  Die if it fails.Also useful\n         * for blowing up early if instance is null.\n         *\n         * What's is 'ctor'? A type constructor. Roughly, the thing you call\n         * 'new' on. e.g. It's the function Foo below:\n         *\n         * <code><pre>\n         * Class Foo {};\n         * let f = new Foo(); //\n         * </code></pre>\n         *\n         * https://github.com/Microsoft/TypeScript/issues/3193\n         * https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#389-constructor-type-literals\n         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof\n         */\n        static cast<T>(instance: any, ctor: {new(...args: any[]): T}): T {\n            if (instance instanceof ctor) return instance;\n            throw new Error(`failed to cast '${instance}' to '${ctor}'`);\n        }\n\n        /** Render each entity on the given canvas. */\n        static render(canvas: HTMLCanvasElement, entities: Array<Entity>, numPlayers: number): void {\n            canvas.width = canvas.width; // hack to clear canvas\n            const paddingFraction = 0.1; // amount of canvas height to leave for padding\n            const yOffset = canvas.height * paddingFraction / 2;\n            const radius = (canvas.height * (1 - paddingFraction)) / numPlayers / 2;\n            const ctx = Util.cast(canvas.getContext(\"2d\"), CanvasRenderingContext2D);\n            entities.forEach((entity, idx) => {\n                const x = entity.x * canvas.height;\n                const y = radius * (2 * idx + 1);\n                ctx.beginPath();\n                ctx.arc(x, y + yOffset, radius, 0, 2*Math.PI, false);\n                ctx.fillStyle = entity.color;\n                ctx.fill();\n                ctx.lineWidth = 3;\n                ctx.strokeStyle = '#003300';\n                ctx.stroke();\n            });\n\n        }\n    }\n\n    // This is all static, so maybe there is a better way than a class to\n    // encapsulate this in TypeScript?  I don't yet fully get modules and\n    // namespaces.\n    class Demo {\n\n        /**\n         * Create a client instance with the given params, wire up its input\n         * handling, and return it.\n         */\n        private static client(cssId: string, color: string, leftKeyCode: number, rightKeyCode: number): Client {\n            const canvas = Util.cast(document.querySelector(`#${cssId} canvas`), HTMLCanvasElement);\n            const status = Util.cast(document.querySelector(`#${cssId} .status .non-ackd`), Element);\n            const c = new Client(cssId, color, canvas, status);\n            // install keyboard handlers\n            const keyHandler: EventListener = e => {\n                const e0: Event = e || window.event;\n                if (e0 instanceof KeyboardEvent) {\n                    if (e0.keyCode === leftKeyCode) {\n                        c.leftKeyDown = (e0.type === \"keydown\");\n                    } else if (e0.keyCode === rightKeyCode) {\n                        c.rightKeyDown = (e0.type === \"keydown\");\n                    }\n                }\n            };\n            document.body.addEventListener(\"keydown\", keyHandler);\n            document.body.addEventListener(\"keyup\", keyHandler);\n            return c;\n        }\n\n        /**\n         * Update the simulation parameters from the current values in the\n         * form elements.\n         */\n        private static updateParameters(server: Server, clients: Array<Client>): void {\n            // update server params\n            const serverTickRate = Util.cast(document.querySelector(\"#server .tickRate\"), HTMLInputElement);\n            server.setTickRate(parseFloat(serverTickRate.value));\n\n            // update params for each client\n            for (let i = 1; i <= clients.length; ++i) {\n                const cssId = 'p' + i;\n                const client = clients.filter(c => c.cssId === cssId)[0]; // linear; assumes small num of clients\n                const getInput = (className: string): HTMLInputElement => {\n                    return Util.cast(document.querySelector(`#${cssId} ${className}`), HTMLInputElement);\n                };\n                client.lagMs = parseInt(getInput('.lag').value);\n                client.usePrediction = getInput('.prediction').checked;\n                client.useReconciliation = getInput('.reconciliation').checked;\n                client.useEntityInterpolation = getInput('.entity-interpolation').checked;\n            }\n        }\n\n        static main(): void {\n            console.log(\"Starting demo\");\n            const server = new Server(Util.cast(document.getElementById('serverCanvas'), HTMLCanvasElement));\n            const clients = [\n                Demo.client('p1', 'red', 81, 69),   // q, e\n                Demo.client('p2', 'green', 65, 68), // a, d\n                Demo.client('p3', 'blue', 90, 67)   // z, c\n            ];\n\n            // Connect each client to the server and start their update timers\n            clients.forEach(client => {\n                console.log(`Connecting client ${client.cssId}`);\n                server.connect(client);\n                client.start();\n            });\n\n            Demo.updateParameters(server, clients);\n            server.start();\n\n            // Hook up listeners to update simulation when text boxes change\n            const inputs = document.querySelectorAll(\"input\");\n            for (let i = 0; i < inputs.length; ++i) {\n                let input = Util.cast(inputs.item(i), HTMLInputElement);\n                input.addEventListener(\"change\", () => {\n                   Demo.updateParameters(server, clients);\n                });\n            }\n        }\n    }\n\n    Demo.main();\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/fpmclone.ts\n **/"],"sourceRoot":""}